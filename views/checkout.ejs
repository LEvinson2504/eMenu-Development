<script src="https://js.stripe.com/v3/"></script>
<!-- create specific payment css here  -->
<!-- <input id="card-name" type="text" />
	placeholder for Elements
	<div id="card-element"></div>
	<button id="card-button" data-secret=" ">
		Submit Payment
	</button> -->

<div class="payment-card">
	  <form id="payment-form" class="form-group">
		  <h1> Proceed to Pay </h1>
		<div id="card-element">
		  <!-- Elements will create input elements here -->
		</div>

		<!-- We'll put the error messages in this element -->
		<div id="card-errors" role="alert"></div>
		<div class="text-right">
			<button id="submit" class="btn btn-primary">Pay</button>
		</div>
	</form>
  </div>
  <script>
	var clientSecret = "<%= client_secret %>";
	var stripe = Stripe("pk_test_syepX9ueRhVX4vxTvAzDhUDT00AtLMLhSM");
	var elements = stripe.elements();

	// Set up Stripe.js and Elements to use in checkout form
	var style = {
	  base: {
		color: "#32325d",
	  },
	};

	var card = elements.create("card", { style: style });
	card.mount("#card-element");

	//validator
	card.addEventListener("change", ({ error }) => {
	  const displayError = document.getElementById("card-errors");
	  if (error) {
		displayError.textContent = error.message;
	  } else {
		displayError.textContent = "";
	  }
	});

	var form = document.getElementById("payment-form");

	form.addEventListener("submit", function (ev) {
	  ev.preventDefault();
	  stripe
		.confirmCardPayment(clientSecret, {
		  payment_method: {
			card: card,
			billing_details: {
			  name: "Jenny Rosen",
			},
		  },
		})
		.then(function (result) {
		  if (result.error) {
			// Show error to your customer (e.g., insufficient funds)
			console.log(result.error.message);
		  } else {
			// The payment has been processed!
			//create another fetch to change the payment status in the database
			if (result.paymentIntent.status === "succeeded") {
				console.log("success");
			  // Show a success message to your customer
			  // There's a risk of the customer closing the window before callback
			  // execution. Set up a webhook or plugin to listen for the
			  // payment_intent.succeeded event that handles any business critical
			  // post-payment actions.
			}
		  }
		});
	});
  </script>
</div>
